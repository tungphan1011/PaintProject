// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using BusinessObject.Models;

namespace ZooDAO
{
    public partial class PRN211_ZOOContext : DbContext
    {
        public PRN211_ZOOContext()
        {
        }

        public PRN211_ZOOContext(DbContextOptions<PRN211_ZOOContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Animal> Animal { get; set; }
        public virtual DbSet<AnimalSpecies> AnimalSpecies { get; set; }
       
        public virtual DbSet<Cage> Cage { get; set; }

        public virtual DbSet<Food> Food { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<ZooTrainerAnimal> ZooTrainerAnimal { get; set; }
        

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer(DBcon()).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
            }
        }
        public string DBcon()
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json");
            IConfiguration configuration = builder.Build();
            return configuration.GetConnectionString("DBDefault");
        }
       

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Animal>(entity =>
            {
                entity.HasOne(d => d.AnimalSpecies)
                    .WithMany(p => p.Animal)
                    .HasForeignKey(d => d.AnimalSpeciesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Animal_AnimalSpecies");
            });



            modelBuilder.Entity<Cage>(entity =>
            {
                entity.HasOne(d => d.AnimalSpecies)
                    .WithMany(p => p.Cage)
                    .HasForeignKey(d => d.AnimalSpeciesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cage_AnimalSpecies");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.Cage)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cage_Area");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Cage)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Cage_User");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasMany(d => d.Constrain)
                    .WithMany(p => p.UserNavigation)
                    .UsingEntity<Dictionary<string, object>>(
                        "Manage",
                        l => l.HasOne<User>().WithMany().HasForeignKey("ConstrainId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Manage_User1"),
                        r => r.HasOne<User>().WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Manage_User"),
                        j =>
                        {
                            j.HasKey("UserId", "ConstrainId");

                            j.ToTable("Manage");

                            j.IndexerProperty<string>("UserId").HasMaxLength(50).HasColumnName("UserID");

                            j.IndexerProperty<string>("ConstrainId").HasMaxLength(50).HasColumnName("ConstrainID");
                        });

                entity.HasMany(d => d.UserNavigation)
                    .WithMany(p => p.Constrain)
                    .UsingEntity<Dictionary<string, object>>(
                        "Manage",
                        l => l.HasOne<User>().WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Manage_User"),
                        r => r.HasOne<User>().WithMany().HasForeignKey("ConstrainId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Manage_User1"),
                        j =>
                        {
                            j.HasKey("UserId", "ConstrainId");

                            j.ToTable("Manage");

                            j.IndexerProperty<string>("UserId").HasMaxLength(50).HasColumnName("UserID");

                            j.IndexerProperty<string>("ConstrainId").HasMaxLength(50).HasColumnName("ConstrainID");
                        });
            });

            modelBuilder.Entity<ZooTrainerAnimal>(entity =>
            {
                entity.HasOne(d => d.Animal)
                    .WithMany(p => p.ZooTrainerAnimal)
                    .HasForeignKey(d => d.AnimalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZooTrainerAnimal_Animal");

                entity.HasOne(d => d.Food)
                    .WithMany(p => p.ZooTrainerAnimal)
                    .HasForeignKey(d => d.FoodId)
                    .HasConstraintName("FK_ZooTrainerAnimal_Food");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ZooTrainerAnimal)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZooTrainerAnimal_User");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}